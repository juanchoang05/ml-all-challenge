name: Code Coverage with JaCoCo (Alternative)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-coverage:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: write
      checks: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests and generate coverage
      run: |
        mvn clean test
        mvn jacoco:report
      
    - name: Verify coverage files exist
      run: |
        if [ ! -f "target/site/jacoco/jacoco.xml" ]; then
          echo "❌ JaCoCo XML report not found"
          exit 1
        fi
        if [ ! -f "target/site/jacoco/jacoco.csv" ]; then
          echo "❌ JaCoCo CSV report not found"
          exit 1
        fi
        echo "✅ Coverage reports generated successfully"
        
    - name: Extract coverage percentage
      id: coverage
      run: |
        # Extract coverage from CSV
        COVERAGE=$(awk -F',' 'END {
          if (NR > 1) {
            missed = $(NF-9)
            covered = $(NF-8)
            total = missed + covered
            if (total > 0) {
              percentage = (covered * 100) / total
              printf "%.1f", percentage
            } else {
              print "0.0"
            }
          }
        }' target/site/jacoco/jacoco.csv)
        
        echo "coverage-percentage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "Coverage: ${COVERAGE}%"
        
    - name: Create coverage badge
      run: |
        COVERAGE=${{ steps.coverage.outputs.coverage-percentage }}
        COLOR="red"
        if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
          COLOR="brightgreen"
        elif (( $(echo "$COVERAGE >= 60" | bc -l) )); then
          COLOR="yellow"
        fi
        
        curl -s "https://img.shields.io/badge/coverage-${COVERAGE}%25-${COLOR}" > coverage-badge.svg
        
    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const coverage = '${{ steps.coverage.outputs.coverage-percentage }}';
          const threshold = 80.0;
          const status = parseFloat(coverage) >= threshold ? '✅' : '❌';
          const color = parseFloat(coverage) >= threshold ? '🟢' : '🔴';
          
          const comment = `## ${status} Code Coverage Report
          
          ${color} **Coverage: ${coverage}%**
          
          - Minimum required: ${threshold}%
          - Status: ${parseFloat(coverage) >= threshold ? 'PASSED' : 'FAILED'}
          
          📊 [View detailed report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ---
          *This comment was automatically generated by the coverage workflow.*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
          
    - name: Archive coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ github.run_number }}
        path: |
          target/site/jacoco/
          coverage-badge.svg
        retention-days: 30
        
    - name: Upload to Codecov (Optional)
      if: env.CODECOV_TOKEN != ''
      uses: codecov/codecov-action@v4
      with:
        files: target/site/jacoco/jacoco.xml
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
        
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: |
          target/surefire-reports/*.xml
          target/failsafe-reports/*.xml
        
    - name: Check coverage threshold
      run: |
        COVERAGE=${{ steps.coverage.outputs.coverage-percentage }}
        THRESHOLD=80.0
        
        if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
          echo "❌ Coverage ($COVERAGE%) is below threshold ($THRESHOLD%)"
          exit 1
        else
          echo "✅ Coverage ($COVERAGE%) meets threshold ($THRESHOLD%)"
        fi

  # Optional: Separate job for SonarQube analysis
  sonarqube:
    needs: test-and-coverage
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache SonarQube packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
        
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run SonarQube analysis
      if: env.SONAR_TOKEN != ''
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        mvn clean verify sonar:sonar \
          -Dsonar.projectKey=ml-core-platform \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.organization=your-org \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
